import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Navbar from './Navbar'
import Card from './card'
import '../styles/Home.module.css'
import Filter from './filter'


import allProduct from '../models/Product'
import connectDB from "@/middleware/mongoose"

require('../middleware/mongoose')
import mongoose from 'mongoose'

require('../models/Product')
require('../models/User')

import User from '../models/User'
require('./api/getProducts')
import {getDefaultMiddleware} from "@reduxjs/toolkit"


import { useEffect, useState } from 'react'
import { Flip, ToastContainer, toast } from 'react-toastify'
import axios from 'axios'
import Router, { useRouter } from 'next/router'
import Product from '../models/Product'
import store from './store'
import { signIn, useSession } from 'next-auth/react'
import { useDispatch } from 'react-redux'
import { removeUser, addUser, updateUserId } from './store/slices/userSlice'
import brandArray from './brandData'
import { logout } from './store/slices/loginSlice'



export default function Home({ j, userData }) {

  let activity = store.getState().finalPersistedReducer;
  const session = useSession()
  const dispatch = useDispatch()

  console.log(session.status)

  if(session.status=='authiorized')
  console.log(session.data.user)


  const router = useRouter();

  
    j.map((item)=>{
      if(!brandArray.includes(item.brand.toLowerCase()) && item.brand.length>0)
      brandArray.push(item.brand.toLowerCase())
    })




  // useEffect(() => {
  //   if (session.data != null) {
  //     userData.map((user) => {
  //       if (user.email == session.data.user.email) {
  //         dispatch(addUser(user))
  //         return;
  //         // dispatch(removeUser())
  //       }

  //     })
  //     if (activity.notify.length > 0) {
  //       if (activity.notify[0] = 'Welcome') {
  //         toast.success(`Welcome ${store.getState().finalPersistedReducer.user[0].fname}`, {
  //           autoClose: 1200,
  //           closeOnClick: true,
  //           pauseOnHover: true,
  //           draggable: true,
  //         })

  //         //  dispatch(removeMsg())

  //       }
  //     }

  //   }

  //   else {

  //     if (activity.notify.length > 0) {
  //       if (activity.notify[0] = 'Logout') {
  //         toast.success(`Logout Sucessfully`, {
  //           autoClose: 1200,
  //           closeOnClick: true,
  //           pauseOnHover: true,
  //           draggable: true,
  //         })

  //         //  dispatch(removeMsg())

  //       }
  //     }

  //   }
  // }, [session.data])

  useEffect(()=>{
    const customizedMiddleware = getDefaultMiddleware({
      serializableCheck: false
    })
  },[])

  setTimeout(() => {
    try{
     let currEmail=activity.user[0].email
     let newFlag=false;
        userData.map((u)=>{
        
        try{
            if(u.email==activity.user[0].email)
            {
              console.log("email match")
              dispatch(updateUserId(u._id))  
              console.log(u._id)
              newFlag=true;
            }
        }

        catch(err){
          // console.log(err)
          
        }
    



  

  })

  if(newFlag==false)
  {
    dispatch(logout())  
    dispatch(removeUser())  


    // dispatch(addMsg('Logout'))
    signOut({ callbackUrl: 'http://localhost:3000' })
  }
}
  catch(err) 
  {
    console.log(err)
  }
    
  }, 10000);
    


  return (
    <>
      <Head>
        <title>Binary Wear's</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="icon" href="https://react-icons.github.io/react-icons/" />
      </Head>


      <section className={styles.main}>

        <ToastContainer

          limit={1}
          className={styles.indexToast}
        />
        <Navbar props={userData}></Navbar>
        <Card response={j}> </Card>
      </section>

    </>
  )

}

export async function getServerSideProps(context) {

  let j;


  if (!mongoose.connections[0].readyState) {
    await mongoose.connect("mongodb://localhost:27017/Ecommerce")
  }


  j = await Product.find();
  let userData = await User.find()


  return {
    props: { j: JSON.parse(JSON.stringify(j)), userData: JSON.parse(JSON.stringify(userData)) } // will be passed to the page component as props
    //props: {userData:JSON.parse(JSON.stringify(userData))}, // will be passed to the page component as props

  }
}







// export {connectDB}